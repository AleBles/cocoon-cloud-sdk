<h1>Cocoon SDK Test</h1>

<div>
    <fieldset>
        <legend>Log In Tests</legend>
        <p>Current token: <span id="current_token"></span></p>
        <input type="button" onclick="loginClick()" value="Log In">
        <input type="button" onclick="logoutClick()" value="Log Out">
    </fieldset>


    <fieldset>
        <legend>User test</legend>
        <div>User info: <p id="me_info"></p></div>
        <input type="button" onclick="fetchUserInfo()" value="Fetch User Info">
    </fieldset>

    <fieldset>
        <legend>Projects</legend>
        <input type="button" onclick="fetchProjects()" value="Fetch projects">
        <input type="button" onclick="createGithub()" value="Create Github Project">
        <input type="button" onclick="createZip()" value="Create Upload Zip Project">
        <input type="button" onclick="createZipUrl()" value="Create Public Zip Project">
        <div id="projects_container">

        </div>
    </fieldset>

    <input type="file" id="uploadFile" style="display:none;">

</div>

<script src="scripts/cocoon.sdk.js"></script>
<script type="text/javascript">

    var client = new CocoonSDK.APIClient({clientId:"MY_CLIENT_ID"});

    var cachedProjects = [];


    function updateLoginData() {
        document.getElementById("current_token").innerText = client.getAccessToken();
    }

    updateLoginData();

    function loginClick() {
        client.logIn({redirectUri:"http://localhost:3000"}, function(token, error) {
            if (error) {
                alert("Error: " + JSON.stringify(error));
            }
            updateLoginData();
        });
    }

    function logoutClick() {
        client.logout();
        updateLoginData();
    }

    function fetchUserInfo() {
        client.me(function(data, error){
            document.getElementById("me_info").innerText = JSON.stringify(data);
            if (error) {
                alert("Error: " + JSON.stringify(error));
            }
        });
    }

    function fetchProjects() {

        client.project.list(function(projects, error){
            if (error) {
                alert('Error: ' + JSON.stringify(error));
                return;
            }
            cachedProjects = projects;
            renderProjects(projects);

        });
    }

    function renderProjects(projects) {

        var container = document.getElementById("projects_container");
        while (container.firstChild) {
            container.removeChild(container.firstChild);
        }
        for (var i = 0; i < projects.length; ++i) {
            var project = projects[i];
            var div = document.createElement("div");

            //title
            div.appendChild(createP("Title: " + project.data.title));

            div.appendChild(createButton("Compile", compile.bind(null, project)));
            div.appendChild(createButton("DevApp", compileDevApp.bind(null, project)));
            div.appendChild(createButton("Upload Zip", uploadZip.bind(null, project)));
            div.appendChild(createButton("Public Zip", publicZip.bind(null, project)));


            //icon
            var icon = new Image();
            icon.style.cssText = "width:100px;height:100px; display:block";
            icon.src = project.getIconSrc('default');
            div.appendChild(icon);

            //platforms
            var ul = document.createElement("ul");
            for (var j = 0; j < project.compilations.length; ++j) {
                var compilation = project.compilations[j];
                var status = compilation.platform + " (status: " + compilation.getStatus() + ")";
                var li = document.createElement("li");
                li.innerText = status;
                var link = project.getDownloadLink(compilation.platform);
                if (link) {
                    var a = document.createElement("a");
                    a.href = link;
                    a.innerText = 'Download';
                    li.appendChild(a);
                }
                ul.appendChild(li);
            }
            div.appendChild(ul);


            //xml
            var textarea = document.createElement("textarea");
            textarea.style.cssText = "min-width:500px; min-height:200px";
            div.appendChild(createButton("Get XML", getXML.bind(null, project, textarea)));
            div.appendChild(createButton("Save XML", saveXML.bind(null, project, textarea)));
            div.appendChild(document.createElement("br"));
            div.appendChild(textarea);

            //delete button
            div.appendChild(document.createElement("br"));
            div.appendChild(document.createElement("br"));
            div.appendChild(createButton("Delete project", deleteProject.bind(null, project)));


            div.appendChild(document.createElement("hr"));
            container.appendChild(div);
        }
    }

    function createGithub() {
        var url = prompt("Enter the public github repo url");
        if (url) {
            client.project.createFromRepository({url:url}, function(project, error) {
                if (error) {
                    alert('Error: ' + JSON.stringify(error));
                }
                else {
                    cachedProjects.splice(0,0, project);
                    renderProjects(cachedProjects);
                    alert('Created successfully');
                }
            });
        }
    }

    function createZipUrl() {
        var url = prompt("Enter the public ZIP url");
        if (url) {
            client.project.createFromPublicZip(url, function(project, error) {
                if (error) {
                    alert('Error: ' + JSON.stringify(error));
                }
                else {
                    cachedProjects.splice(0,0, project);
                    renderProjects(cachedProjects);
                    alert('Created successfully');
                }
            });
        }
    }

    function createZip(){
        promptFile(function(file){
            if (!file){
                return;
            }
            client.project.createFromZipUpload(file, function(project, error) {
                if (error) {
                    alert('Error: ' + JSON.stringify(error));
                }
                else {
                    cachedProjects.splice(0,0, project);
                    renderProjects(cachedProjects);
                    alert('Created successfully');
                }
            });
        });
    }

    function deleteProject(project) {
        project.delete(function(error){
            if (error) {
                alert("Error: " + JSON.stringify(error));
            }
            else {
                alert('yeape');
                var index = cachedProjects.indexOf(project);
                if (index >= 0) {
                    cachedProjects.splice(index, 1);
                    renderProjects(cachedProjects);
                }
            }
        });
    }

    function compile(project){
        project.compile(function(error){
            if (error) {
                alert('Error: ' + JSON.stringify(error));
            }
            else {
                alert('Compiling!');
                project.refreshUntilCompleted(function(){
                    renderProjects(cachedProjects); //TODO, refresh only specific DOM
                });
            }
        });
    }

    function compileDevApp(project){
        project.compileDevApp(function(error){
            if (error) {
                alert('Error');
            }
            else {
                alert('Compiling!');
            }
        });
    }


    function uploadZip(project) {
        promptFile(function(file){
            if (!file){
                return;
            }
            project.uploadZip(file, function(error) {
                alert('finish');
                if (error) {
                    alert('Error: ' + JSON.stringify(error));
                }
                else {
                    renderProjects(cachedProjects);
                    alert('Updated successfully');
                }
            });
        });
    }

    function publicZip(project) {
        var url = prompt("Enter the public ZIP url");
        project.updatePublicZip(url, function(error) {
            if (error) {
                alert('Error: ' + JSON.stringify(error));
            }
            else {
                renderProjects(cachedProjects);
                alert('Updated successfully');
            }
        });
    }


    function getXML(project, textarea) {
        project.getConfigXml(function(xml, error) {
            if (error) {
                alert("Error: " + JSON.stringify(error));
            }
            textarea.value = xml;
        });
    }

    function saveXML(project, textarea) {
        console.log(textarea.value);
        project.putConfigXml(textarea.value, function(error) {
            if (error) {
                alert("Error: " + JSON.stringify(error));
            }
            else {
                alert("Successfully saved");
            }
        });
    }

    function createButton(title, handler) {
        var button = document.createElement("button");
        button.innerText = title;
        button.onclick = handler;
        return button;
    }

    function createP(text) {
        var p  = document.createElement("p");
        p.innerHTML = text;
        return p;
    }

    function createLi(text) {
        var li = document.createElement("li");
        li.innerText = text;
        return li;
    }

    function promptFile(callback) {
        var input = document.getElementById("uploadFile");
        input.onchange = null;
        input.value = "";
        input.onchange = function() {
            var files = this.files;
            if (!files.length) {
                alert('Please select a file!');
                callback(null);
                return;
            }

            var file = files[0];
            callback(file);
        };
        input.click();
    }


</script>
